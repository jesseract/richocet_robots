// Generated by CoffeeScript 1.9.3
(function() {
  var HEADING, _, corners, nextCoord, ref,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  ref = require('./core'), HEADING = ref.HEADING, nextCoord = ref.nextCoord;

  corners = function(isLeft, isTop, column, row) {
    if (!_.contains(['first', 'last', 'interior'], row)) {
      throw Error('invalid arg for row');
    }
    if (!_.contains(['first', 'last', 'interior'], column)) {
      throw Error('invalid arg for column');
    }
    if (row === 'interior' && column === 'interior' || row === 'interior' && column === 'last' && isTop && isLeft || row === 'last' && column === 'interior' && isTop && isLeft || row === 'last' && column === 'last' && isTop && isLeft) {
      return '┼';
    }
    if (row === 'first' && column === 'first' && isLeft && isTop) {
      return '┌';
    }
    if (row === 'first' && column === 'last' && !isLeft && isTop) {
      return '┐';
    }
    if (row === 'last' && column === 'first' && isLeft && !isTop) {
      return '└';
    }
    if (row === 'last' && column === 'last' && !isLeft && !isTop) {
      return '┘';
    }
    if (row === 'first' && isTop) {
      return '┬';
    }
    if (row === 'last' && !isTop) {
      return '┴';
    }
    if (column === 'first' && isLeft) {
      return '├';
    }
    if (column === 'last' && !isLeft) {
      return '┤';
    }
  };

  module.exports = function(board, robots) {
    var boxRow, color, column, drewARobot, endc, i, j, k, l, len, len1, m, r, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, row, s, x, y;
    color = "\u001b[97m";
    endc = "\u001b[39m";
    color = '\u001b[43m';
    endc = '\u001b[49m';
    s = '';
    for (y = i = 0, ref1 = board.height - 1; 0 <= ref1 ? i <= ref1 : i >= ref1; y = 0 <= ref1 ? ++i : --i) {
      ref2 = ['top', 'middle'];
      for (j = 0, len = ref2.length; j < len; j++) {
        boxRow = ref2[j];
        for (x = k = 0, ref3 = board.width - 1; 0 <= ref3 ? k <= ref3 : k >= ref3; x = 0 <= ref3 ? ++k : --k) {
          column = x === 0 ? 'first' : x === board.width - 1 ? 'last' : 'interior';
          row = y === 0 ? 'first' : y === board.height - 1 ? 'last' : 'interior';
          if (boxRow === 'top') {
            s += corners(true, true, column, row);
            if (ref4 = HEADING.NORTH, indexOf.call(board.squares[x][y], ref4) >= 0) {
              s += color + '═══' + endc;
            } else {
              s += '┄┄┄';
            }
            if (column === 'last') {
              s += corners(false, true, column, row);
              s += '\n';
            }
          }
          if (boxRow === 'middle') {
            if (ref5 = HEADING.WEST, indexOf.call(board.squares[x][y], ref5) >= 0) {
              s += color + '║' + endc;
            } else {
              s += '┆';
            }
            drewARobot = false;
            for (l = 0, len1 = robots.length; l < len1; l++) {
              r = robots[l];
              if (r.location[0] === x && r.location[1] === y) {
                drewARobot = true;
                s += " " + r.name + " ";
              }
            }
            if (!drewARobot) {
              if (board.targetLoc[0] === x && board.targetLoc[1] === y) {
                s += ' * ';
              } else {
                s += '   ';
              }
            }
            if (column === 'last') {
              if (ref6 = HEADING.EAST, indexOf.call(board.squares[x][y], ref6) >= 0) {
                s += color + '║' + endc;
              } else {
                s += '│';
              }
              s += '\n';
            }
          }
        }
      }
    }
    boxRow = 'bottom';
    for (x = m = 0, ref7 = board.width - 1; 0 <= ref7 ? m <= ref7 : m >= ref7; x = 0 <= ref7 ? ++m : --m) {
      column = x === 0 ? 'first' : x === board.width - 1 ? 'last' : 'interior';
      row = 'last';
      s += corners(true, false, column, row);
      if (ref8 = HEADING.SOUTH, indexOf.call(board.squares[x][board.height - 1], ref8) >= 0) {
        s += color + '═══' + endc;
      } else {
        s += '───';
      }
      if (column === 'last') {
        s += corners(false, false, column, row);
        s += '\n';
      }
    }
    return console.log(s);
  };

}).call(this);
