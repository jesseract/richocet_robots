// Generated by CoffeeScript 1.9.3
(function() {
  var HEADING, RIGHT_ANGLES, Robot, _, nextCoord,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  module.exports.HEADING = HEADING = {
    NORTH: 0,
    EAST: 1,
    SOUTH: 2,
    WEST: 3
  };

  module.exports.nextCoord = nextCoord = function(coord, heading) {
    switch (heading) {
      case HEADING.NORTH:
        return [coord[0], coord[1] - 1];
      case HEADING.EAST:
        return [coord[0] + 1, coord[1]];
      case HEADING.SOUTH:
        return [coord[0], coord[1] + 1];
      case HEADING.WEST:
        return [coord[0] - 1, coord[1]];
    }
  };

  RIGHT_ANGLES = {};

  RIGHT_ANGLES[HEADING.NORTH] = [HEADING.EAST, HEADING.WEST];

  RIGHT_ANGLES[HEADING.SOUTH] = [HEADING.EAST, HEADING.WEST];

  RIGHT_ANGLES[HEADING.EAST] = [HEADING.NORTH, HEADING.SOUTH];

  RIGHT_ANGLES[HEADING.WEST] = [HEADING.NORTH, HEADING.SOUTH];

  module.exports.Robot = Robot = (function() {
    function Robot(name1, location1, heading1) {
      this.name = name1;
      this.location = location1;
      this.heading = heading1;
      if ((this.name == null) || this.name.length > 1) {
        throw Error("Robot names must be length 1");
      }
    }

    Robot.prototype._allowedNextHeadings = function() {
      if (this.heading == null) {
        return _.values(HEADING);
      } else {
        return RIGHT_ANGLES[this.heading];
      }
    };

    Robot.prototype.possibleNextHeadings = function(board, robots) {
      return _.filter(this._allowedNextHeadings(), (function(_this) {
        return function(h) {
          return _this._canMoveOnHeading(board, robots, h);
        };
      })(this));
    };

    Robot.prototype._canMoveOnHeading = function(board, robots, h) {
      var hitRobot, nextLoc;
      if (indexOf.call(board.squares[this.location[0]][this.location[1]], h) >= 0) {
        return false;
      }
      nextLoc = nextCoord(this.location, h);
      hitRobot = _.any(robots, function(r) {
        return nextLoc[0] === r.location[0] && nextLoc[1] === r.location[1];
      });
      return !hitRobot;
    };

    Robot.prototype.move = function(board, robots, heading) {
      var movedR, ref;
      if (ref = !heading, indexOf.call(this.possibleNextHeadings(board, robots), ref) >= 0) {
        throw Error("that robot can't go that way");
      }
      movedR = new Robot(this.name, nextCoord(this.location, heading), heading);
      while (movedR._canMoveOnHeading(board, robots, heading)) {
        movedR.location = nextCoord(movedR.location, heading);
      }
      return movedR;
    };

    Robot.prototype.toString = function() {
      var c, i, j, ref, s;
      s = this.name;
      for (i = j = 0; j <= 1; i = ++j) {
        c = this.location[i] + '';
        if (c.length < 2) {
          c = '0' + c;
        }
        s += c;
      }
      s += ((ref = this.heading) != null ? ref : 9) + '';
      return s;
    };

    Robot.fromString = function(s) {
      var heading, intFromIndex, location, name, r;
      intFromIndex = function(i, l) {
        return parseInt(s.substr(i, l), 10);
      };
      name = s.substr(0, 1);
      location = [intFromIndex(1, 2), intFromIndex(3, 2)];
      heading = intFromIndex(5, 1);
      if (heading === 9) {
        heading = null;
      }
      r = new Robot(name, location);
      r.heading = heading;
      return r;
    };

    return Robot;

  })();

}).call(this);
